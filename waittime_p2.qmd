---
title: "medium_p2"
author: "Peter Hahn"
format: html
editor: visual
---

## Peter's R - Solving prolonged waiting-times with tidymodels

### part 2

Script for this medium blog

### Load the preprocessed data

### load data from my repository https://github.com/phahn57/medium_wz

### modify the directory in the read_csv

```{r}
#| label: load-packages
#| include: false
library(tidyverse)
library(explore)
library(tidymodels)

### Load the preprocessed data
### load data from my repository https://github.com/phahn57/medium_wz
wait <- read_csv("../data/wait.csv")
### Variables used
ml_fall <- wait %>% select(arzt_code,p2p,ops,stat,age)
```

### Data budget

```{r}
set.seed(1234)
fall_split <- ml_fall %>%
  initial_split(strata = p2p) 
hc_train <- training(fall_split)
hc_test <- testing(fall_split)
```

### Recipe

```{r}
fall_rec <- recipe(p2p ~ ., data = hc_train) %>%
        step_other(ops, threshold = 0.02) %>% 
        # step_other(arzt_code, threshold = 0.01) %>% 
        step_dummy(all_nominal(), -all_outcomes()) %>%
        #step_pca(matches("(ops)"), num_comp = 7) %>% 
        # step_interact(~ wtag:doc_class) %>%
        step_zv()
```
## Define an engine

```{r}
lm_spec <- linear_reg() %>%
  set_engine(engine = "lm") %>% 
        set_mode("regression")
```

### Workflow linear regression
```{r}
lm_wflow <- workflow() %>% 
        add_model(lm_spec) %>% 
        add_recipe(fall_rec)
```

```{r}
lm_fit <- fit(lm_wflow, data = hc_train)
lm_fit_tidy <- tidy(lm_fit) %>% arrange(desc(estimate))
```

```{r eval = FALSE}
results_test_lm <- predict(lm_fit, new_data = hc_test) %>% 
        mutate(truth = hc_test$p2p) %>%
        mutate(max_diff = abs(.pred-truth))
results_test_lm %>%
        rmse(truth = truth, estimate = .pred)
```

```{r eval = FALSE}
results_test_lm %>% ggplot(aes(truth,.pred)) + geom_point()
```

### Lets us test random forest
```{r}
rf_model <- 
  rand_forest(trees = 500) %>% 
  set_engine("ranger") %>% 
  set_mode("regression")

rf_wflow <- 
  workflow() %>% 
        add_recipe(fall_rec) %>%         
        #add_formula(p2p ~ .) %>% 
        add_model(rf_model) 

hc_train <- hc_train  %>% filter(!is.na(arzt_code))
rf_fit <- rf_wflow %>% fit(data = hc_train)

results_test_rf <- predict(rf_fit, new_data = hc_train) %>% 
        mutate(truth = hc_train$p2p) %>%
        mutate(max_diff = abs(.pred-truth))
results_test_rf %>%
        rmse(truth = truth, estimate = .pred)
```